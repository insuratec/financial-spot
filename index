<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>InsuraTec Connect - Financial Snapshot</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://npmcdn.com/parse@4.0.1/dist/parse.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Display', 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif;
            background: #e8f4fd;
            min-height: 100vh;
            padding: 20px;
            font-weight: 400;
            line-height: 1.47;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }

        .main-container {
            max-width: 1600px;
            width: 95%;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .header {
            background: white;
            color: #1e3a8a;
            padding: 40px 30px;
            text-align: center;
            border-bottom: 1px solid #e5e7eb;
            overflow: visible;
        }

        .header h1 {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 10px;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        }

        .header p {
            font-size: 1.1rem;
            opacity: 0.9;
        }

        /* Logo Styles */
        .logo-container {
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 20px;
            text-align: center;
            width: 100%;
            max-width: 800px;
            margin-left: auto;
            margin-right: auto;
        }

        .logo-left {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .camera-icon {
            position: relative;
            margin: 5px;
            overflow: visible;
        }

        .camera-body {
            width: 40px;
            height: 30px;
            border: 3px solid #f97316;
            border-radius: 8px;
            position: relative;
            background: transparent;
        }

        .camera-lens {
            width: 20px;
            height: 20px;
            border: 2px solid #f97316;
            border-radius: 50%;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            display: flex;
            align-items: center;
            justify-content: center;
            background: #f97316;
        }

        .dollar-sign {
            color: white;
            font-weight: bold;
            font-size: 12px;
        }

        .camera-flash {
            width: 6px;
            height: 6px;
            background: #f97316;
            border-radius: 50%;
            position: absolute;
            top: -5px;
            right: -5px;
        }

        .logo-text {
            display: flex;
            flex-direction: column;
            gap: 2px;
        }

        .financial, .snapshot {
            color: #f97316;
            font-weight: 700;
            font-size: 1.8rem;
            line-height: 1;
        }

        .logo-divider {
            width: 2px;
            height: 40px;
            background: #f97316;
        }

        .logo-right {
            display: flex;
            align-items: center;
            gap: 15px;
            position: relative;
            overflow: visible;
            min-width: 200px;
        }

        .policy-text {
            display: flex;
            align-items: baseline;
            gap: 2px;
        }

        .my, .info {
            color: #f97316;
            font-weight: 600;
            font-size: 1.2rem;
        }

        .policy {
            color: #1e3a8a;
            font-weight: 700;
            font-size: 1.8rem;
        }

        .swoosh {
            position: relative;
            width: 40px;
            height: 30px;
            overflow: visible;
            margin-right: 10px;
        }

        .swoosh-line {
            position: absolute;
            height: 2px;
            border-radius: 1px;
        }

        .swoosh-upper {
            width: 30px;
            background: #f97316;
            top: 10px;
            left: 0;
            transform: rotate(15deg);
        }

        .swoosh-lower {
            width: 25px;
            background: #1e3a8a;
            bottom: 10px;
            left: 5px;
            transform: rotate(15deg);
        }

        .content {
            padding: 0;
        }

        .wizard-container {
            display: flex;
            min-height: calc(100vh - 200px);
            max-width: 100%;
            overflow: hidden;
        }

        .sidebar {
            width: 350px;
            min-width: 350px;
            background: #f8f9fa;
            border-right: 1px solid #e9ecef;
            padding: 20px 0;
            position: relative;
            z-index: 2;
            flex-shrink: 0;
        }

        .progress-steps {
            list-style: none;
        }

        .progress-step {
            display: flex;
            align-items: center;
            padding: 15px 30px;
            cursor: pointer;
            transition: all 0.3s ease;
            border-left: 4px solid transparent;
        }

        .progress-step:hover {
            background: rgba(35, 82, 135, 0.05);
        }

        .progress-step.active {
            background: rgba(249, 115, 22, 0.1);
            border-left-color: #f97316;
            color: #f97316;
            font-weight: 500;
        }

        .progress-step.completed {
            color: #28a745;
        }

        .step-number {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            background: #e9ecef;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 15px;
            font-weight: 600;
            font-size: 0.9rem;
        }

        .progress-step.active .step-number {
            background: #f97316;
            color: white;
        }

        .progress-step.completed .step-number {
            background: #28a745;
            color: white;
        }

        .step-content {
            flex: 1;
            padding: 40px 60px;
            overflow-y: visible;
            min-height: calc(100vh - 200px);
            margin-left: 20px;
            background: white;
            border-radius: 15px;
            box-shadow: 0 5px 20px rgba(0,0,0,0.1);
            position: relative;
            z-index: 1;
        }

        .step-title {
            font-size: 1.8rem;
            font-weight: 600;
            color: #1e3a8a;
            margin-bottom: 10px;
            position: relative;
            z-index: 1;
        }

        .step-description {
            color: #6c757d;
            margin-bottom: 30px;
            font-size: 1rem;
            position: relative;
            z-index: 1;
        }

        .step {
            position: relative;
            z-index: 1;
            background: white;
            border-radius: 15px;
            padding: 40px 60px;
            margin-left: 20px;
            box-shadow: 0 5px 20px rgba(0,0,0,0.1);
        }

        .form-group {
            margin-bottom: 28px;
            position: relative;
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 24px;
            margin-bottom: 28px;
        }

        .form-col {
            flex: 1;
        }

        /* iOS Style Labels */
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #1d1d1f;
            font-size: 17px;
            letter-spacing: -0.022em;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
        }

        /* iOS Style Input Fields */
        input, select, textarea {
            width: 100%;
            padding: 16px 20px;
            border: 1px solid rgba(0, 0, 0, 0.1);
            border-radius: 12px;
            font-size: 17px;
            font-weight: 400;
            background: rgba(118, 118, 128, 0.04);
            color: #1d1d1f;
            transition: all 0.2s cubic-bezier(0.25, 0.1, 0.25, 1);
            -webkit-appearance: none;
            appearance: none;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.04);
            letter-spacing: -0.022em;
            box-sizing: border-box;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
        }

        input::placeholder,
        textarea::placeholder {
            color: rgba(60, 60, 67, 0.6);
            font-weight: 400;
        }

        input:focus, select:focus, textarea:focus {
            outline: none;
            border-color: #f97316;
            background: rgba(249, 115, 22, 0.04);
            box-shadow: 0 0 0 4px rgba(249, 115, 22, 0.1), 0 2px 8px rgba(0, 0, 0, 0.08);
            transform: translateY(-1px);
        }

        input:hover:not(:focus),
        select:hover:not(:focus),
        textarea:hover:not(:focus) {
            border-color: rgba(0, 0, 0, 0.15);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
        }

        /* iOS Style Checkboxes */
        .checkbox-group {
            display: flex;
            flex-wrap: wrap;
            gap: 12px;
            margin-top: 12px;
        }

        .checkbox-item {
            display: flex;
            align-items: center;
            padding: 12px 16px;
            background: rgba(118, 118, 128, 0.04);
            border: 1px solid rgba(0, 0, 0, 0.1);
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.2s cubic-bezier(0.25, 0.1, 0.25, 1);
        }

        .checkbox-item:hover {
            background: rgba(249, 115, 22, 0.04);
            border-color: rgba(249, 115, 22, 0.2);
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
        }

        .checkbox-item input[type="checkbox"] {
            width: 18px;
            height: 18px;
            margin: 0 8px 0 0;
            appearance: none;
            border: 2px solid rgba(60, 60, 67, 0.3);
            border-radius: 4px;
            background: white;
            position: relative;
            cursor: pointer;
            transition: all 0.2s ease;
            flex-shrink: 0;
        }

        .checkbox-item input[type="checkbox"]:checked {
            border-color: #f97316;
            background: #f97316;
        }

        .checkbox-item input[type="checkbox"]:checked::after {
            content: '✓';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-size: 12px;
            font-weight: bold;
        }

        .checkbox-item input[type="checkbox"]:checked ~ label {
            color: #f97316;
            font-weight: 600;
        }

        .checkbox-item label {
            font-size: 17px;
            color: #1d1d1f;
            cursor: pointer;
            letter-spacing: -0.022em;
            transition: all 0.2s ease;
            margin: 0;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
        }

        /* iOS Style Radio Buttons */
        .radio-group {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 12px;
            margin-top: 12px;
            margin-bottom: 30px;
        }

        .radio-item {
            display: flex;
            align-items: center;
            padding: 16px 20px;
            background: rgba(118, 118, 128, 0.04);
            border: 1px solid rgba(0, 0, 0, 0.1);
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.2s cubic-bezier(0.25, 0.1, 0.25, 1);
            position: relative;
        }

        .radio-item:hover {
            background: rgba(249, 115, 22, 0.04);
            border-color: rgba(249, 115, 22, 0.2);
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
        }

        .radio-item input[type="radio"] {
            width: 20px;
            height: 20px;
            margin: 0 12px 0 0;
            appearance: none;
            border: 2px solid rgba(60, 60, 67, 0.3);
            border-radius: 50%;
            background: white;
            position: relative;
            cursor: pointer;
            transition: all 0.2s ease;
            flex-shrink: 0;
        }

        .radio-item input[type="radio"]:checked {
            border-color: #f97316;
            background: #f97316;
        }

        .radio-item input[type="radio"]:checked::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 8px;
            height: 8px;
            background: white;
            border-radius: 50%;
        }

        .radio-item input[type="radio"]:checked ~ label {
            color: #f97316;
            font-weight: 600;
        }

        .radio-item label {
            font-size: 17px;
            color: #1d1d1f;
            cursor: pointer;
            flex: 1;
            letter-spacing: -0.022em;
            transition: all 0.2s ease;
            margin: 0;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
        }

        /* iOS Style Select Dropdown */
        select {
            background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='rgba(60,60,67,0.6)' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6,9 12,15 18,9'%3e%3c/polyline%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right 16px center;
            background-size: 16px;
            padding-right: 50px;
            cursor: pointer;
        }

        /* iOS Style Number Inputs */
        input[type="number"] {
            -webkit-appearance: none;
            -moz-appearance: textfield;
        }

        input[type="number"]::-webkit-outer-spin-button,
        input[type="number"]::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }

        /* iOS Style Date Input */
        input[type="date"] {
            position: relative;
            color: #1d1d1f;
        }

        input[type="date"]::-webkit-calendar-picker-indicator {
            background: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='rgba(60,60,67,0.6)' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3crect x='3' y='4' width='18' height='18' rx='2' ry='2'%3e%3c/rect%3e%3cline x1='16' y1='2' x2='16' y2='6'%3e%3c/line%3e%3cline x1='8' y1='2' x2='8' y2='6'%3e%3c/line%3e%3cline x1='3' y1='10' x2='21' y2='10'%3e%3c/line%3e%3c/svg%3e") no-repeat;
            background-size: 18px;
            cursor: pointer;
            opacity: 0.6;
        }

        /* iOS Style Textarea */
        textarea {
            resize: vertical;
            min-height: 120px;
            line-height: 1.4;
        }

        /* iOS Style Buttons */
        .btn {
            padding: 16px 32px;
            border: none;
            border-radius: 12px;
            cursor: pointer;
            font-weight: 600;
            text-decoration: none;
            display: inline-block;
            transition: all 0.2s cubic-bezier(0.25, 0.1, 0.25, 1);
            font-size: 17px;
            letter-spacing: -0.022em;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
            position: relative;
            overflow: hidden;
            text-align: center;
        }

        .btn-primary {
            background: #f97316;
            color: white;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);
        }

        .btn-primary:hover {
            background: #ea580c;
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(249, 115, 22, 0.4), 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .btn-primary:active {
            transform: translateY(0);
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);
        }

        .btn-secondary {
            background: rgba(118, 118, 128, 0.08);
            color: #1e3a8a;
            border: 1px solid rgba(0, 0, 0, 0.1);
        }

        .btn-secondary:hover {
            background: rgba(118, 118, 128, 0.12);
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        .btn-secondary:active {
            transform: translateY(0);
            background: rgba(118, 118, 128, 0.16);
        }

        .btn-outline {
            background: transparent;
            color: #1e3a8a;
            border: 2px solid #1e3a8a;
        }

        .btn-outline:hover {
            background: #1e3a8a;
            color: white;
        }

        .wizard-navigation {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 40px;
            padding-top: 30px;
            border-top: 1px solid #e9ecef;
        }

        .multi-entry-section {
            border: 2px solid #e9ecef;
            border-radius: 15px;
            padding: 30px;
            margin-bottom: 35px;
            background: #f8f9fa;
        }

        .multi-entry-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .multi-entry-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: #1e3a8a;
        }

        .add-entry-btn {
            background: #28a745;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.9rem;
            transition: all 0.3s ease;
        }

        .add-entry-btn:hover {
            background: #218838;
            transform: translateY(-1px);
        }

        .entry-item {
            background: white;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 15px;
            border: 1px solid #dee2e6;
            position: relative;
        }

        .entry-header {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: 15px;
        }

        .entry-title {
            font-weight: 500;
            color: #495057;
        }

        .remove-entry-btn {
            background: #dc3545;
            color: white;
            border: none;
            padding: 4px 8px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.8rem;
            position: absolute;
            top: 10px;
            right: 10px;
        }

        .conditional-section {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 8px;
            padding: 20px;
            margin: 20px 0;
        }

        .conditional-title {
            color: #856404;
            font-weight: 500;
            margin-bottom: 15px;
        }

        .summary-card {
            background: white;
            border-radius: 12px;
            padding: 25px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            border: 1px solid #e9ecef;
        }

        .summary-title {
            font-size: 1.3rem;
            font-weight: 600;
            color: #1e3a8a;
            margin-bottom: 15px;
        }

        .summary-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
        }

        .summary-item {
            text-align: center;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 8px;
        }

        .summary-value {
            font-size: 1.5rem;
            font-weight: 700;
            color: #1e3a8a;
            margin-bottom: 5px;
        }

        .summary-label {
            font-size: 0.9rem;
            color: #6c757d;
        }

        .chart-container {
            margin-top: 30px;
            text-align: center;
        }

        .chart-wrapper {
            position: relative;
            height: 400px;
            max-width: 800px;
            margin: 20px auto;
        }

        /* Agent Panel Styles */
        .agent-panel {
            background: white;
            color: #1e3a8a;
            padding: 20px;
            margin-bottom: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            border: 1px solid #e5e7eb;
        }

        .agent-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .agent-login {
            display: flex;
            gap: 10px;
            align-items: center;
        }

        .agent-login input {
            padding: 8px 12px;
            border: none;
            border-radius: 5px;
            font-size: 14px;
        }

        .agent-display {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .agent-label {
            font-weight: bold;
            font-size: 16px;
        }

        .btn-primary, .btn-secondary, .btn-search, .btn-new {
            padding: 8px 16px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .btn-primary {
            background: #28a745;
            color: white;
        }

        .btn-primary:hover {
            background: #218838;
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-secondary:hover {
            background: #545b62;
        }

        .btn-search {
            background: #007bff;
            color: white;
        }

        .btn-search:hover {
            background: #0056b3;
        }

        .btn-new {
            background: #17a2b8;
            color: white;
        }

        .btn-new:hover {
            background: #117a8b;
        }

        .search-panel {
            background: rgba(255,255,255,0.1);
            padding: 15px;
            border-radius: 8px;
        }

        .search-controls {
            display: flex;
            gap: 10px;
            align-items: center;
            margin-bottom: 15px;
        }

        .search-input {
            flex: 1;
            padding: 10px 15px;
            border: none;
            border-radius: 5px;
            font-size: 14px;
        }

        .search-results {
            background: rgba(255,255,255,0.95);
            color: #333;
            padding: 15px;
            border-radius: 8px;
            margin-top: 10px;
        }

        .search-results h3 {
            margin: 0 0 15px 0;
            color: #333;
        }

        .results-list {
            max-height: 200px;
            overflow-y: auto;
        }

        .result-item {
            background: white;
            padding: 12px;
            margin-bottom: 8px;
            border-radius: 5px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .result-item:hover {
            background: #f8f9fa;
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }

        .client-info {
            flex: 1;
        }

        .client-name {
            font-weight: bold;
            color: #333;
            margin-bottom: 4px;
        }

        .client-details {
            font-size: 12px;
            color: #666;
        }

        .result-actions {
            display: flex;
            gap: 8px;
        }

        .btn-load, .btn-delete {
            padding: 4px 8px;
            border: none;
            border-radius: 3px;
            cursor: pointer;
            font-size: 12px;
        }

        .btn-load {
            background: #28a745;
            color: white;
        }

        .btn-delete {
            background: #dc3545;
            color: white;
        }

        .hidden {
            display: none;
        }

        /* Simple Progress Bar */
        .simple-progress-container {
            background: white;
            border-radius: 8px;
            padding: 12px 20px;
            margin-bottom: 15px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.06);
        }

        .simple-progress-track {
            background: #f1f3f4;
            height: 4px;
            border-radius: 8px;
            margin-bottom: 8px;
            overflow: hidden;
        }

        .simple-progress-fill {
            background: linear-gradient(90deg, #f97316 0%, #ea580c 100%);
            height: 100%;
            border-radius: 8px;
            transition: width 0.6s cubic-bezier(0.4, 0, 0.2, 1);
        }

        .progress-text {
            text-align: center;
            font-size: 13px;
            color: #1e3a8a;
            font-weight: 600;
        }

        /* Vertical Progress Steps in Sidebar */
        .sidebar-header {
            padding: 25px 30px;
            background: white;
            color: #1e3a8a;
            margin-bottom: 20px;
            border-bottom: 1px solid #e5e7eb;
        }

        .sidebar-header h3 {
            margin: 0 0 8px 0;
            font-size: 22px;
            font-weight: 600;
        }

        .sidebar-progress-percentage {
            font-size: 18px;
            opacity: 0.9;
        }

        .vertical-progress-steps {
            padding: 0 25px;
        }

        .vertical-progress-step {
            display: flex;
            align-items: flex-start;
            padding: 15px 0;
            cursor: pointer;
            transition: all 0.3s ease;
            border-bottom: 1px solid rgba(0,0,0,0.05);
            position: relative;
        }

        .vertical-progress-step:last-child {
            border-bottom: none;
        }

        .vertical-progress-step:hover:not(.active) {
            background: rgba(249, 115, 22, 0.05);
            border-radius: 8px;
            margin: 0 -10px;
            padding: 15px 10px;
        }

        .vertical-progress-step .step-circle {
            position: relative;
            width: 32px;
            height: 32px;
            margin-right: 15px;
            transition: all 0.3s ease;
            flex-shrink: 0;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .vertical-progress-step .step-icon {
            font-size: 16px;
            color: #1e3a8a;
            transition: all 0.3s ease;
            margin-right: 8px;
        }

        .vertical-progress-step.active .step-icon {
            color: #f97316;
        }

        .vertical-progress-step.completed .step-icon {
            color: #28a745;
        }

        .vertical-progress-step .step-number {
            font-weight: 600;
            font-size: 20px;
            color: #6c757d;
            transition: all 0.3s ease;
        }

        .vertical-progress-step .step-check {
            width: 26px;
            height: 26px;
            border: 2px solid #28a745;
            border-radius: 4px;
            background: #28a745;
            position: relative;
            opacity: 0;
            transition: all 0.3s ease;
        }

        .vertical-progress-step .step-check::after {
            content: '✓';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-size: 16px;
            font-weight: bold;
        }

        .step-info {
            flex: 1;
            margin-top: 2px;
        }

        .step-info .step-label {
            font-size: 18px;
            font-weight: 600;
            color: #1d1d1f;
            margin-bottom: 4px;
            transition: color 0.3s ease;
        }

        .step-info .step-description {
            font-size: 14px;
            color: #6c757d;
            line-height: 1.3;
            transition: color 0.3s ease;
        }

        /* Active Vertical Step */
        .vertical-progress-step.active {
            background: linear-gradient(135deg, rgba(249, 115, 22, 0.1) 0%, rgba(234, 88, 12, 0.1) 100%);
            border-radius: 12px;
            margin: 0 -10px;
            padding: 15px 10px;
            border-left: 4px solid #f97316;
        }

        .vertical-progress-step.active .step-number {
            color: #f97316;
            font-weight: 700;
        }

        .vertical-progress-step.active .step-info .step-label {
            color: #1d1d1f;
            font-weight: 700;
        }

        .vertical-progress-step.active .step-info .step-description {
            color: #f97316;
            opacity: 0.8;
        }

        /* Completed Vertical Step */
        .vertical-progress-step.completed .step-number {
            opacity: 0;
        }

        .vertical-progress-step.completed .step-check {
            opacity: 1;
        }

        .vertical-progress-step.completed .step-info .step-label {
            color: #28a745;
        }

        .vertical-progress-step.completed .step-info .step-description {
            color: #28a745;
            opacity: 0.8;
        }

        /* Responsive Design */
        @media (max-width: 1200px) {
            .wizard-container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                min-width: 100%;
                border-right: none;
                border-bottom: 1px solid #e9ecef;
            }
            
            .step-content, .step {
                margin-left: 0;
                padding: 30px 40px;
                max-width: 100%;
            }
            
            .radio-group {
                grid-template-columns: 1fr;
            }
        }
        
        @media (max-width: 768px) {
            .progress-container {
                padding: 20px 15px;
            }
            
            .progress-header {
                flex-direction: column;
                gap: 10px;
                text-align: center;
            }
            
            .step-circle {
                width: 40px;
                height: 40px;
            }
            
            .step-number {
                font-size: 14px;
            }
            
            .step-check {
                font-size: 16px;
            }
            
            .step-label {
                font-size: 11px;
                max-width: 60px;
            }
            
            .step-content, .step {
                padding: 20px;
                margin-left: 0;
            }
            
            .form-row {
                grid-template-columns: 1fr;
                gap: 16px;
            }
            
            .radio-group {
                grid-template-columns: 1fr;
            }
        }

        .alert {
            padding: 15px 20px;
            border-radius: 8px;
            margin: 20px 0;
            border: 1px solid;
        }

        .alert-info {
            background: #d1ecf1;
            border-color: #bee5eb;
            color: #0c5460;
        }

        .alert-warning {
            background: #fff3cd;
            border-color: #ffeaa7;
            color: #856404;
        }

        @media (max-width: 1200px) {
            .main-container {
                max-width: 95%;
                margin: 10px auto;
            }
            
            .sidebar {
                width: 280px;
            }
            
            .step-content {
                padding: 30px 40px;
            }
        }

        @media (max-width: 768px) {
            .main-container {
                margin: 5px;
                border-radius: 15px;
                width: calc(100% - 10px);
            }

            .wizard-container {
                flex-direction: column;
                min-height: auto;
            }

            .sidebar {
                width: 100%;
                padding: 15px 0;
            }

            .progress-steps {
                display: flex;
                flex-wrap: wrap;
                padding: 0 15px;
            }

            .progress-step {
                min-width: 150px;
                padding: 10px 15px;
            }

            .step-content {
                padding: 20px;
                min-height: auto;
            }

            .form-row {
                grid-template-columns: 1fr;
                gap: 20px;
            }

            .radio-group {
                grid-template-columns: 1fr;
                gap: 15px;
            }

            .wizard-navigation {
                flex-direction: column;
                gap: 15px;
            }
        }
    </style>
</head>
<body>
    <div class="main-container">
        <!-- Agent Panel - Hidden -->
        <div class="agent-panel hidden">
            <div class="agent-info">
                <div class="agent-login" id="agentLogin">
                    <input type="text" id="agentName" placeholder="Agent Name" required>
                    <button onclick="setAgent()" class="btn-primary">Set Agent</button>
                </div>
                <div class="agent-display hidden" id="agentDisplay">
                    <span class="agent-label">Agent:</span>
                    <span id="currentAgent"></span>
                    <button onclick="clearAgent()" class="btn-secondary">Change</button>
                </div>
            </div>
            
            <div class="search-panel">
                <div class="search-controls">
                    <input type="text" id="clientSearch" placeholder="Search client records by name..." class="search-input">
                    <button onclick="searchClients()" class="btn-search">🔍 Search</button>
                    <button onclick="showNewClient()" class="btn-new">➕ New Client</button>
                </div>
                
                <div class="search-results hidden" id="searchResults">
                    <h3>Previous Records</h3>
                    <div class="results-list" id="resultsList"></div>
                </div>
            </div>
        </div>

        <div class="header">
            <div class="logo-container">
                <img src="25JUN_Financial_Snapshot_Logo_Dual Wide-06.png" alt="Financial Snapshot Logo" style="max-width: 100%; height: auto; max-height: 80px;">
            </div>
            <p>Complete assessment to generate your comprehensive financial profile</p>
        </div>
        
        <div class="content">
            <!-- Simple Progress Bar -->
            <div class="simple-progress-container">
                <div class="simple-progress-track">
                    <div class="simple-progress-fill" id="simpleProgressFill"></div>
                </div>
                <div class="progress-text" id="progressText">Step 1 of 7 (14%)</div>
            </div>
            
            <div class="wizard-container">
                <div class="sidebar">
                    <div class="sidebar-header">
                        <h3>Progress Overview</h3>
                        <span class="sidebar-progress-percentage" id="sidebarProgressPercentage">Step 1 of 7</span>
                    </div>
                    <div class="vertical-progress-steps">
                        <div class="vertical-progress-step active" data-step="1">
                            <div class="step-circle">
                                <span class="step-number">1</span>
                                <div class="step-check">✓</div>
                            </div>
                            <div class="step-info">
                                <div class="step-label"><i class="fas fa-user step-icon"></i>General Information</div>
                                <div class="step-description">Basic details and goals</div>
                            </div>
                        </div>
                        <div class="vertical-progress-step" data-step="2">
                            <div class="step-circle">
                                <span class="step-number">2</span>
                                <div class="step-check">✓</div>
                            </div>
                            <div class="step-info">
                                <div class="step-label"><i class="fas fa-shield-alt step-icon"></i>Life Insurance</div>
                                <div class="step-description">Current policies and coverage</div>
                            </div>
                        </div>
                        <div class="vertical-progress-step" data-step="3">
                            <div class="step-circle">
                                <span class="step-number">3</span>
                                <div class="step-check">✓</div>
                            </div>
                            <div class="step-info">
                                <div class="step-label"><i class="fas fa-credit-card step-icon"></i>Debt Analysis</div>
                                <div class="step-description">Loans and obligations</div>
                            </div>
                        </div>
                        <div class="vertical-progress-step" data-step="4">
                            <div class="step-circle">
                                <span class="step-number">4</span>
                                <div class="step-check">✓</div>
                            </div>
                            <div class="step-info">
                                <div class="step-label"><i class="fas fa-dollar-sign step-icon"></i>Income Assessment</div>
                                <div class="step-description">Income sources and amounts</div>
                            </div>
                        </div>
                        <div class="vertical-progress-step" data-step="5">
                            <div class="step-circle">
                                <span class="step-number">5</span>
                                <div class="step-check">✓</div>
                            </div>
                            <div class="step-info">
                                <div class="step-label"><i class="fas fa-piggy-bank step-icon"></i>Retirement Planning</div>
                                <div class="step-description">Retirement accounts and savings</div>
                            </div>
                        </div>
                        <div class="vertical-progress-step" data-step="6">
                            <div class="step-circle">
                                <span class="step-number">6</span>
                                <div class="step-check">✓</div>
                            </div>
                            <div class="step-info">
                                <div class="step-label"><i class="fas fa-users step-icon"></i>Generational Planning</div>
                                <div class="step-description">Estate and legacy planning</div>
                            </div>
                        </div>
                        <div class="vertical-progress-step" data-step="7">
                            <div class="step-circle">
                                <span class="step-number">7</span>
                                <div class="step-check">✓</div>
                            </div>
                            <div class="step-info">
                                <div class="step-label"><i class="fas fa-file-alt step-icon"></i>Summary & Export</div>
                                <div class="step-description">Review and generate report</div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="step-content">
                    <!-- Step 1: General Information -->
                    <div class="step" id="step1">
                        <h2 class="step-title">General Information</h2>
                        <p class="step-description">Let's start with your basic information to personalize your financial assessment.</p>

                        <div class="form-row">
                            <div class="form-col">
                                <label for="firstName">First Name</label>
                                <input type="text" id="firstName" name="firstName" required>
                            </div>
                            <div class="form-col">
                                <label for="lastName">Last Name</label>
                                <input type="text" id="lastName" name="lastName" required>
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-col">
                                <label for="dateOfBirth">Date of Birth</label>
                                <input type="date" id="dateOfBirth" name="dateOfBirth" required>
                            </div>
                            <div class="form-col">
                                <label for="age">Age (Auto-calculated)</label>
                                <input type="number" id="age" name="age" readonly>
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-col">
                                <label for="maritalStatus">Marital Status</label>
                                <select id="maritalStatus" name="maritalStatus">
                                    <option value="">Select...</option>
                                    <option value="single">Single</option>
                                    <option value="married">Married</option>
                                    <option value="divorced">Divorced</option>
                                    <option value="widowed">Widowed</option>
                                </select>
                            </div>
                            <div class="form-col">
                                <label for="homeOwnership">Home Ownership</label>
                                <select id="homeOwnership" name="homeOwnership">
                                    <option value="">Select...</option>
                                    <option value="own">Own</option>
                                    <option value="rent">Rent</option>
                                    <option value="other">Other</option>
                                </select>
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-col">
                                <label for="children">Number of Children</label>
                                <input type="number" id="children" name="children" min="0" value="0">
                            </div>
                            <div class="form-col">
                                <label for="grandchildren">Number of Grandchildren</label>
                                <input type="number" id="grandchildren" name="grandchildren" min="0" value="0">
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="mainGoal">What is your main financial goal?</label>
                            <div class="radio-group">
                                <div class="radio-item">
                                    <input type="radio" id="goalProtection" name="mainGoal" value="protection">
                                    <label for="goalProtection">Financial Protection</label>
                                </div>
                                <div class="radio-item">
                                    <input type="radio" id="goalRetirement" name="mainGoal" value="retirement">
                                    <label for="goalRetirement">Retirement Planning</label>
                                </div>
                                <div class="radio-item">
                                    <input type="radio" id="goalWealth" name="mainGoal" value="wealth">
                                    <label for="goalWealth">Wealth Building</label>
                                </div>
                                <div class="radio-item">
                                    <input type="radio" id="goalOther" name="mainGoal" value="other">
                                    <label for="goalOther">Other</label>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Step 2: Life Insurance -->
                    <div class="step hidden" id="step2">
                        <h2 class="step-title">Existing Life Insurance</h2>
                        <p class="step-description">Tell us about your current life insurance policies.</p>

                        <div class="multi-entry-section">
                            <div class="multi-entry-header">
                                <div class="multi-entry-title">Life Insurance Policies</div>
                                <button type="button" class="add-entry-btn" onclick="addLifeInsuranceEntry()">+ Add Policy</button>
                            </div>
                            <div id="lifeInsuranceEntries">
                                <!-- Dynamic entries will be added here -->
                            </div>
                        </div>

                        <div class="conditional-section" id="noLivingBenefitsQuestion" style="display: none;">
                            <div class="conditional-title">Follow-up Question</div>
                            <label>Since you don't have living benefits on your policies, how important is it to have coverage that helps with chronic illness, critical illness, or long-term care?</label>
                            <div class="radio-group">
                                <div class="radio-item">
                                    <input type="radio" name="livingBenefitsImportance" value="very">
                                    <label>Very Important</label>
                                </div>
                                <div class="radio-item">
                                    <input type="radio" name="livingBenefitsImportance" value="somewhat">
                                    <label>Somewhat Important</label>
                                </div>
                                <div class="radio-item">
                                    <input type="radio" name="livingBenefitsImportance" value="not">
                                    <label>Not Important</label>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Step 3: Debt Analysis -->
                    <div class="step hidden" id="step3">
                        <h2 class="step-title">Debt Analysis</h2>
                        <p class="step-description">Let's analyze your current debt situation across different categories.</p>

                        <!-- Real Estate Debt -->
                        <div class="multi-entry-section">
                            <div class="multi-entry-header">
                                <div class="multi-entry-title">Real Estate Debt</div>
                                <button type="button" class="add-entry-btn" onclick="addDebtEntry('realEstate')">+ Add Property</button>
                            </div>
                            <div id="realEstateEntries"></div>
                        </div>

                        <!-- Auto Debt -->
                        <div class="multi-entry-section">
                            <div class="multi-entry-header">
                                <div class="multi-entry-title">Auto Debt</div>
                                <button type="button" class="add-entry-btn" onclick="addDebtEntry('auto')">+ Add Vehicle</button>
                            </div>
                            <div id="autoEntries"></div>
                        </div>

                        <!-- Student Debt -->
                        <div class="multi-entry-section">
                            <div class="multi-entry-header">
                                <div class="multi-entry-title">Student Debt</div>
                                <button type="button" class="add-entry-btn" onclick="addDebtEntry('student')">+ Add Loan</button>
                            </div>
                            <div id="studentEntries"></div>
                        </div>

                        <!-- Personal Debt -->
                        <div class="multi-entry-section">
                            <div class="multi-entry-header">
                                <div class="multi-entry-title">Personal Debt</div>
                                <button type="button" class="add-entry-btn" onclick="addDebtEntry('personal')">+ Add Debt</button>
                            </div>
                            <div id="personalEntries"></div>
                        </div>

                        <!-- Credit Card Debt -->
                        <div class="multi-entry-section">
                            <div class="multi-entry-header">
                                <div class="multi-entry-title">Credit Card Debt</div>
                                <button type="button" class="add-entry-btn" onclick="addDebtEntry('creditCard')">+ Add Card</button>
                            </div>
                            <div id="creditCardEntries"></div>
                        </div>

                        <!-- Debt Summary -->
                        <div class="summary-card">
                            <div class="summary-title">Debt Summary</div>
                            <div class="summary-grid">
                                <div class="summary-item">
                                    <div class="summary-value" id="totalMonthlyPayments">$0</div>
                                    <div class="summary-label">Total Monthly Payments</div>
                                </div>
                                <div class="summary-item">
                                    <div class="summary-value" id="totalDebtBalance">$0</div>
                                    <div class="summary-label">Total Debt Balance</div>
                                </div>
                                <div class="summary-item">
                                    <div class="summary-value" id="averageInterestRate">0%</div>
                                    <div class="summary-label">Average Interest Rate</div>
                                </div>
                            </div>
                            <div class="chart-container">
                                <canvas id="debtChart" class="chart-wrapper"></canvas>
                            </div>
                        </div>
                    </div>

                    <!-- Step 4: Income Assessment -->
                    <div class="step hidden" id="step4">
                        <h2 class="step-title">Income Assessment</h2>
                        <p class="step-description">Tell us about your income sources and employment situation.</p>

                        <div class="multi-entry-section">
                            <div class="multi-entry-header">
                                <div class="multi-entry-title">Income Sources</div>
                                <button type="button" class="add-entry-btn" onclick="addIncomeEntry()">+ Add Income Source</button>
                            </div>
                            <div id="incomeEntries"></div>
                        </div>

                        <div class="summary-card">
                            <div class="summary-title">Income Summary</div>
                            <div class="summary-grid">
                                <div class="summary-item">
                                    <div class="summary-value" id="totalGrossIncome">$0</div>
                                    <div class="summary-label">Total Gross Income</div>
                                </div>
                                <div class="summary-item">
                                    <div class="summary-value" id="totalNetIncome">$0</div>
                                    <div class="summary-label">Total Net Income</div>
                                </div>
                                <div class="summary-item">
                                    <div class="summary-value" id="householdIncome">$0</div>
                                    <div class="summary-label">Household Income</div>
                                </div>
                            </div>
                        </div>

                        <div class="conditional-section" id="incomeSurveySkip" style="display: none;">
                            <div class="alert alert-info">
                                Based on your age and income level, you can skip to the retirement section or continue with the income survey.
                            </div>
                        </div>
                    </div>

                    <!-- Step 5: Retirement Planning -->
                    <div class="step hidden" id="step5">
                        <h2 class="step-title">Retirement Planning</h2>
                        <p class="step-description">Let's review your retirement accounts and planning strategy.</p>

                        <div class="conditional-section" id="retirementAgeCheck">
                            <div class="alert alert-warning">
                                <strong>Note:</strong> Some retirement questions are age-specific and will be customized based on your age.
                            </div>
                        </div>

                        <div class="multi-entry-section">
                            <div class="multi-entry-header">
                                <div class="multi-entry-title">Retirement Accounts</div>
                                <button type="button" class="add-entry-btn" onclick="addRetirementEntry()">+ Add Account</button>
                            </div>
                            <div id="retirementEntries"></div>
                        </div>

                        <div class="multi-entry-section">
                            <div class="multi-entry-header">
                                <div class="multi-entry-title">Other Financial Accounts</div>
                                <button type="button" class="add-entry-btn" onclick="addFinancialEntry()">+ Add Account</button>
                            </div>
                            <div id="financialEntries"></div>
                        </div>

                        <div class="conditional-section" id="retirementSurvey" style="display: none;">
                            <div class="conditional-title">Retirement Survey (Age 59.5+)</div>
                            <div class="form-group">
                                <label>How would you rank your retirement preparedness?</label>
                                <div class="radio-group">
                                    <div class="radio-item">
                                        <input type="radio" name="retirementPreparedness" value="excellent">
                                        <label>Excellent</label>
                                    </div>
                                    <div class="radio-item">
                                        <input type="radio" name="retirementPreparedness" value="good">
                                        <label>Good</label>
                                    </div>
                                    <div class="radio-item">
                                        <input type="radio" name="retirementPreparedness" value="fair">
                                        <label>Fair</label>
                                    </div>
                                    <div class="radio-item">
                                        <input type="radio" name="retirementPreparedness" value="poor">
                                        <label>Poor</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Step 6: Generational Planning -->
                    <div class="step hidden" id="step6">
                        <h2 class="step-title">Generational Planning</h2>
                        <p class="step-description">Let's discuss your estate planning and legacy goals.</p>

                        <div class="form-group">
                            <label>Do you have a will?</label>
                            <div class="radio-group">
                                <div class="radio-item">
                                    <input type="radio" name="hasWill" value="yes">
                                    <label>Yes</label>
                                </div>
                                <div class="radio-item">
                                    <input type="radio" name="hasWill" value="no">
                                    <label>No</label>
                                </div>
                                <div class="radio-item">
                                    <input type="radio" name="hasWill" value="outdated">
                                    <label>Yes, but it's outdated</label>
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            <label>Do you have a trust?</label>
                            <div class="radio-group">
                                <div class="radio-item">
                                    <input type="radio" name="hasTrust" value="yes">
                                    <label>Yes</label>
                                </div>
                                <div class="radio-item">
                                    <input type="radio" name="hasTrust" value="no">
                                    <label>No</label>
                                </div>
                                <div class="radio-item">
                                    <input type="radio" name="hasTrust" value="considering">
                                    <label>Considering it</label>
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            <label>Please rank your concerns about generational wealth transfer (1 = highest concern):</label>
                            <div class="form-row">
                                <div class="form-col">
                                    <label for="taxConcern">Tax implications</label>
                                    <select id="taxConcern" name="taxConcern">
                                        <option value="">Select rank...</option>
                                        <option value="1">1 - Highest</option>
                                        <option value="2">2</option>
                                        <option value="3">3</option>
                                        <option value="4">4 - Lowest</option>
                                    </select>
                                </div>
                                <div class="form-col">
                                    <label for="familyHarmonyConcern">Family harmony</label>
                                    <select id="familyHarmonyConcern" name="familyHarmonyConcern">
                                        <option value="">Select rank...</option>
                                        <option value="1">1 - Highest</option>
                                        <option value="2">2</option>
                                        <option value="3">3</option>
                                        <option value="4">4 - Lowest</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Step 7: Summary & Export -->
                    <div class="step hidden" id="step7">
                        <h2 class="step-title">Financial Snapshot Summary</h2>
                        <p class="step-description">Here's your comprehensive financial overview and recommendations.</p>

                        <div class="summary-card">
                            <div class="summary-title">Personal Information</div>
                            <div id="personalSummary"></div>
                        </div>

                        <div class="summary-card">
                            <div class="summary-title">Financial Overview</div>
                            <div class="summary-grid">
                                <div class="summary-item">
                                    <div class="summary-value" id="finalTotalIncome">$0</div>
                                    <div class="summary-label">Annual Income</div>
                                </div>
                                <div class="summary-item">
                                    <div class="summary-value" id="finalTotalDebt">$0</div>
                                    <div class="summary-label">Total Debt</div>
                                </div>
                                <div class="summary-item">
                                    <div class="summary-value" id="finalNetWorth">$0</div>
                                    <div class="summary-label">Estimated Net Worth</div>
                                </div>
                                <div class="summary-item">
                                    <div class="summary-value" id="finalLifeInsurance">$0</div>
                                    <div class="summary-label">Life Insurance Coverage</div>
                                </div>
                            </div>
                        </div>

                        <div class="summary-card">
                            <div class="summary-title">Financial Health Score</div>
                            <div style="text-align: center; margin: 20px 0;">
                                <div style="font-size: 3rem; font-weight: bold; color: #28a745;" id="healthScore">85</div>
                                <div style="color: #6c757d;">out of 100</div>
                            </div>
                            <canvas id="summaryChart" class="chart-wrapper"></canvas>
                        </div>

                        <div class="summary-card">
                            <div class="summary-title">Recommendations</div>
                            <div id="recommendationsList">
                                <!-- Recommendations will be generated here -->
                            </div>
                        </div>

                        <div style="text-align: center; margin-top: 30px;">
                            <button type="button" class="btn btn-primary" onclick="exportToPDF()" style="margin-right: 15px;">
                                📄 Export to PDF
                            </button>
                            <button type="button" class="btn btn-outline" onclick="emailReport()">
                                📧 Email Report
                            </button>
                        </div>
                    </div>

                    <div class="wizard-navigation">
                        <button type="button" class="btn btn-secondary" id="prevBtn" onclick="previousStep()" style="display: none;">
                            ← Previous
                        </button>
                        <div style="flex-grow: 1;"></div>
                        <button type="button" class="btn btn-primary" id="nextBtn" onclick="nextStep()">
                            Next →
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Initialize Parse
        Parse.initialize("UzhGs8AnUe3qOl836wSLsVG1iVhlb5vkRknFkvyH", "NguMpB9MrkVYtve3NqjJrHGCu3oZBDjf5ivICEBZ");
        Parse.serverURL = "https://parseapi.back4app.com/";

        // Global variables
        let currentStep = 1;
        const totalSteps = 7;
        let currentAgent = null;
        let currentRecordId = null; // For editing existing records
        let formData = {
            personal: {},
            lifeInsurance: [],
            debts: {
                realEstate: [],
                auto: [],
                student: [],
                personal: [],
                creditCard: []
            },
            income: [],
            retirement: [],
            financial: [],
            planning: {}
        };

        // Session storage key
        const SESSION_KEY = 'financial_snapshot_data';
        const STEP_KEY = 'financial_snapshot_step';
        const AGENT_KEY = 'financial_snapshot_agent';

        // Initialize the form
        document.addEventListener('DOMContentLoaded', function() {
            // Set default agent automatically
            currentAgent = 'Current Agent';
            
            loadFromSessionStorage();
            updateProgress();
            setupEventListeners();
            
            // Auto-calculate age when date of birth changes
            document.getElementById('dateOfBirth').addEventListener('change', calculateAge);
            
            // Auto-save on form changes
            setupAutoSave();
        });

        function setupEventListeners() {
            // Vertical progress step navigation - allow navigation to any step
            document.querySelectorAll('.vertical-progress-step').forEach(step => {
                step.addEventListener('click', function() {
                    const stepNumber = parseInt(this.dataset.step);
                    goToStep(stepNumber);
                });
            });
        }

        // Session Storage Functions
        function saveToSessionStorage() {
            try {
                sessionStorage.setItem(SESSION_KEY, JSON.stringify(formData));
                sessionStorage.setItem(STEP_KEY, currentStep.toString());
                console.log('Data saved to session storage');
            } catch (error) {
                console.error('Error saving to session storage:', error);
            }
        }

        function loadFromSessionStorage() {
            try {
                const savedData = sessionStorage.getItem(SESSION_KEY);
                const savedStep = sessionStorage.getItem(STEP_KEY);
                
                if (savedData) {
                    formData = JSON.parse(savedData);
                    console.log('Data loaded from session storage');
                    
                    // Restore form fields
                    restoreFormFields();
                }
                
                if (savedStep) {
                    currentStep = parseInt(savedStep);
                    goToStep(currentStep);
                }
            } catch (error) {
                console.error('Error loading from session storage:', error);
            }
        }

        function restoreFormFields() {
            // Restore general information
            if (formData.personal) {
                const fields = ['firstName', 'lastName', 'dateOfBirth', 'age', 'maritalStatus', 'homeOwnership', 'children', 'grandchildren'];
                fields.forEach(field => {
                    const element = document.getElementById(field);
                    if (element && formData.personal[field] !== undefined) {
                        element.value = formData.personal[field];
                    }
                });
                
                // Restore radio button
                if (formData.personal.mainGoal) {
                    const radioElement = document.querySelector(`input[name="mainGoal"][value="${formData.personal.mainGoal}"]`);
                    if (radioElement) radioElement.checked = true;
                }
            }
            
            // Restore other sections
            restoreLifeInsuranceEntries();
            restoreDebtEntries();
            restoreIncomeEntries();
            restoreRetirementEntries();
            restoreFinancialEntries();
            restorePlanningData();
        }

        function restoreLifeInsuranceEntries() {
            if (formData.lifeInsurance && formData.lifeInsurance.length > 0) {
                formData.lifeInsurance.forEach((policy, index) => {
                    addLifeInsuranceEntry();
                    const entries = document.querySelectorAll('#lifeInsuranceEntries .entry-item');
                    const entry = entries[entries.length - 1];
                    
                    if (entry) {
                        // Handle text fields normally
                        const textFields = ['policyType', 'insurer', 'livingBenefits'];
                        textFields.forEach(field => {
                            const element = entry.querySelector(`[name="${field}"]`);
                            if (element && policy[field] !== undefined) {
                                element.value = policy[field];
                            }
                        });
                        
                        // Handle currency fields with formatting
                        const currencyFields = ['faceAmount', 'premium', 'cashValue'];
                        currencyFields.forEach(field => {
                            const element = entry.querySelector(`[name="${field}"]`);
                            if (element && policy[field] !== undefined && policy[field] > 0) {
                                element.value = '$' + policy[field].toLocaleString('en-US');
                            }
                        });
                    }
                });
            }
        }

        function restoreDebtEntries() {
            const debtTypes = ['realEstate', 'auto', 'student', 'personal', 'creditCard'];
            
            debtTypes.forEach(type => {
                if (formData.debts[type] && formData.debts[type].length > 0) {
                    formData.debts[type].forEach(debt => {
                        addDebtEntry(type);
                        const entries = document.querySelectorAll(`#${type}Entries .entry-item`);
                        const entry = entries[entries.length - 1];
                        
                        if (entry) {
                            Object.keys(debt).forEach(field => {
                                const element = entry.querySelector(`[name="${field}"]`);
                                if (element && debt[field] !== undefined) {
                                    element.value = debt[field];
                                }
                            });
                        }
                    });
                }
            });
        }

        function restoreIncomeEntries() {
            if (formData.income && formData.income.length > 0) {
                formData.income.forEach(income => {
                    addIncomeEntry();
                    const entries = document.querySelectorAll('#incomeEntries .entry-item');
                    const entry = entries[entries.length - 1];
                    
                    if (entry) {
                        const fields = ['person', 'sourceType', 'employer', 'frequency', 'grossIncome', 'netIncome'];
                        fields.forEach(field => {
                            const element = entry.querySelector(`[name="${field}"]`);
                            if (element && income[field] !== undefined) {
                                element.value = income[field];
                            }
                        });
                    }
                });
            }
        }

        function restoreRetirementEntries() {
            if (formData.retirement && formData.retirement.length > 0) {
                formData.retirement.forEach(account => {
                    addRetirementEntry();
                    const entries = document.querySelectorAll('#retirementEntries .entry-item');
                    const entry = entries[entries.length - 1];
                    
                    if (entry) {
                        const fields = ['accountType', 'institution', 'currentBalance', 'contribution', 'employerMatch', 'vestingSchedule'];
                        fields.forEach(field => {
                            const element = entry.querySelector(`[name="${field}"]`);
                            if (element && account[field] !== undefined) {
                                element.value = account[field];
                            }
                        });
                    }
                });
            }
        }

        function restoreFinancialEntries() {
            if (formData.financial && formData.financial.length > 0) {
                formData.financial.forEach(account => {
                    addFinancialEntry();
                    const entries = document.querySelectorAll('#financialEntries .entry-item');
                    const entry = entries[entries.length - 1];
                    
                    if (entry) {
                        const fields = ['accountType', 'institution', 'balance', 'interestRate'];
                        fields.forEach(field => {
                            const element = entry.querySelector(`[name="${field}"]`);
                            if (element && account[field] !== undefined) {
                                element.value = account[field];
                            }
                        });
                    }
                });
            }
        }

        function restorePlanningData() {
            if (formData.planning) {
                // Restore radio buttons
                if (formData.planning.hasWill) {
                    const element = document.querySelector(`input[name="hasWill"][value="${formData.planning.hasWill}"]`);
                    if (element) element.checked = true;
                }
                
                if (formData.planning.hasTrust) {
                    const element = document.querySelector(`input[name="hasTrust"][value="${formData.planning.hasTrust}"]`);
                    if (element) element.checked = true;
                }
                
                // Restore select fields
                const selectFields = ['taxConcern', 'familyHarmonyConcern'];
                selectFields.forEach(field => {
                    const element = document.getElementById(field);
                    if (element && formData.planning[field] !== undefined) {
                        element.value = formData.planning[field];
                    }
                });
            }
        }

        function setupAutoSave() {
            // Save data whenever user interacts with form elements
            document.addEventListener('input', function(e) {
                if (e.target.matches('input, select, textarea')) {
                    // Format currency fields
                    if (e.target.classList.contains('currency') || 
                        e.target.name === 'faceAmount' || 
                        e.target.name === 'premium' || 
                        e.target.name === 'cashValue' ||
                        e.target.name === 'balance' ||
                        e.target.name === 'grossIncome' ||
                        e.target.name === 'netIncome' ||
                        e.target.name === 'currentBalance' ||
                        e.target.name === 'contribution' ||
                        e.target.name === 'employerMatch') {
                        formatCurrencyInput(e.target);
                    }
                    setTimeout(saveCurrentStepData, 100); // Small delay to ensure value is updated
                }
            });
            
            document.addEventListener('change', function(e) {
                if (e.target.matches('input[type="radio"], input[type="checkbox"]')) {
                    setTimeout(saveCurrentStepData, 100);
                }
            });
        }

        function formatCurrencyInput(input) {
            let value = input.value.replace(/[^\d]/g, ''); // Remove all non-digits
            
            if (value === '') {
                input.value = '';
                return;
            }
            
            // Convert to number and format with commas
            let number = parseInt(value);
            let formatted = number.toLocaleString('en-US');
            
            // Add dollar sign
            input.value = '$' + formatted;
        }

        function parseCurrencyValue(formattedValue) {
            // Remove dollar sign and commas, return number
            return parseInt(formattedValue.replace(/[$,]/g, '')) || 0;
        }

        function clearSessionStorage() {
            try {
                sessionStorage.removeItem(SESSION_KEY);
                sessionStorage.removeItem(STEP_KEY);
                console.log('Session storage cleared');
            } catch (error) {
                console.error('Error clearing session storage:', error);
            }
        }

        // Agent Management Functions
        function loadAgent() {
            try {
                const savedAgent = sessionStorage.getItem(AGENT_KEY);
                if (savedAgent) {
                    currentAgent = savedAgent;
                    showAgentDisplay();
                }
            } catch (error) {
                console.error('Error loading agent:', error);
            }
        }

        function setAgent() {
            const agentName = document.getElementById('agentName').value.trim();
            if (!agentName) {
                alert('Please enter an agent name');
                return;
            }
            
            currentAgent = agentName;
            sessionStorage.setItem(AGENT_KEY, agentName);
            showAgentDisplay();
        }

        function clearAgent() {
            currentAgent = null;
            sessionStorage.removeItem(AGENT_KEY);
            document.getElementById('agentName').value = '';
            showAgentLogin();
            
            // Clear search results
            const searchResults = document.getElementById('searchResults');
            searchResults.classList.add('hidden');
        }

        function showAgentDisplay() {
            document.getElementById('currentAgent').textContent = currentAgent;
            document.getElementById('agentLogin').classList.add('hidden');
            document.getElementById('agentDisplay').classList.remove('hidden');
        }

        function showAgentLogin() {
            document.getElementById('agentLogin').classList.remove('hidden');
            document.getElementById('agentDisplay').classList.add('hidden');
        }

        // Database Functions
        async function saveToDatabase() {
            if (!currentAgent) {
                alert('Please set an agent name before saving');
                return false;
            }

            if (!formData.personal.firstName || !formData.personal.lastName) {
                alert('Please enter client name before saving');
                return false;
            }

            try {
                const FinancialSnapshot = Parse.Object.extend('financial_snapshot');
                let snapshot;
                
                if (currentRecordId) {
                    // Update existing record
                    const query = new Parse.Query(FinancialSnapshot);
                    snapshot = await query.get(currentRecordId);
                } else {
                    // Create new record
                    snapshot = new FinancialSnapshot();
                }

                // Set all the data
                snapshot.set('agentName', currentAgent);
                snapshot.set('clientFirstName', formData.personal.firstName);
                snapshot.set('clientLastName', formData.personal.lastName);
                snapshot.set('clientFullName', `${formData.personal.firstName} ${formData.personal.lastName}`);
                snapshot.set('personalInfo', formData.personal);
                snapshot.set('lifeInsurance', formData.lifeInsurance);
                snapshot.set('debts', formData.debts);
                snapshot.set('income', formData.income);
                snapshot.set('retirement', formData.retirement);
                snapshot.set('financial', formData.financial);
                snapshot.set('planning', formData.planning);
                snapshot.set('completionDate', new Date());
                snapshot.set('isComplete', currentStep === totalSteps);

                // Calculate summary data
                const summary = calculateSummaryData();
                snapshot.set('summaryData', summary);

                const result = await snapshot.save();
                currentRecordId = result.id;
                
                console.log('Financial snapshot saved successfully:', result.id);
                return true;
            } catch (error) {
                console.error('Error saving to database:', error);
                alert('Error saving data. Please try again.');
                return false;
            }
        }

        function calculateSummaryData() {
            // Calculate total debts
            let totalDebt = 0;
            Object.values(formData.debts).forEach(debtCategory => {
                if (Array.isArray(debtCategory)) {
                    debtCategory.forEach(debt => {
                        totalDebt += parseFloat(debt.balance || 0);
                    });
                }
            });

            // Calculate total income
            let totalIncome = 0;
            formData.income.forEach(income => {
                totalIncome += parseFloat(income.grossIncome || 0);
            });

            // Calculate total life insurance
            let totalLifeInsurance = 0;
            formData.lifeInsurance.forEach(policy => {
                totalLifeInsurance += parseFloat(policy.faceAmount || 0);
            });

            // Calculate total retirement
            let totalRetirement = 0;
            formData.retirement.forEach(account => {
                totalRetirement += parseFloat(account.currentBalance || 0);
            });

            return {
                totalDebt,
                totalIncome,
                totalLifeInsurance,
                totalRetirement,
                age: formData.personal.age || 0,
                mainGoal: formData.personal.mainGoal || ''
            };
        }

        async function searchClients() {
            if (!currentAgent) {
                alert('Please set an agent name first');
                return;
            }

            const searchTerm = document.getElementById('clientSearch').value.trim();
            
            try {
                const FinancialSnapshot = Parse.Object.extend('financial_snapshot');
                const query = new Parse.Query(FinancialSnapshot);
                
                query.equalTo('agentName', currentAgent);
                
                if (searchTerm) {
                    query.contains('clientFullName', searchTerm);
                }
                
                query.descending('updatedAt');
                query.limit(20);
                
                const results = await query.find();
                displaySearchResults(results);
                
            } catch (error) {
                console.error('Error searching clients:', error);
                alert('Error searching records. Please try again.');
            }
        }

        function displaySearchResults(results) {
            const searchResults = document.getElementById('searchResults');
            const resultsList = document.getElementById('resultsList');
            
            if (results.length === 0) {
                resultsList.innerHTML = '<p>No records found.</p>';
                searchResults.classList.remove('hidden');
                return;
            }
            
            let html = '';
            results.forEach(result => {
                const data = result.attributes;
                const updatedAt = new Date(result.updatedAt).toLocaleDateString();
                const summary = data.summaryData || {};
                
                html += `
                    <div class="result-item">
                        <div class="client-info">
                            <div class="client-name">${data.clientFullName || 'Unknown Client'}</div>
                            <div class="client-details">
                                Updated: ${updatedAt} | 
                                Age: ${summary.age || 'N/A'} | 
                                Goal: ${summary.mainGoal || 'N/A'} | 
                                Status: ${data.isComplete ? 'Complete' : 'In Progress'}
                            </div>
                        </div>
                        <div class="result-actions">
                            <button class="btn-load" onclick="loadClientRecord('${result.id}')">Load</button>
                            <button class="btn-delete" onclick="deleteClientRecord('${result.id}')">Delete</button>
                        </div>
                    </div>
                `;
            });
            
            resultsList.innerHTML = html;
            searchResults.classList.remove('hidden');
        }

        async function loadClientRecord(recordId) {
            try {
                const FinancialSnapshot = Parse.Object.extend('financial_snapshot');
                const query = new Parse.Query(FinancialSnapshot);
                const record = await query.get(recordId);
                
                const data = record.attributes;
                
                // Load all the data
                formData.personal = data.personalInfo || {};
                formData.lifeInsurance = data.lifeInsurance || [];
                formData.debts = data.debts || {
                    realEstate: [],
                    auto: [],
                    student: [],
                    personal: [],
                    creditCard: []
                };
                formData.income = data.income || [];
                formData.retirement = data.retirement || [];
                formData.financial = data.financial || [];
                formData.planning = data.planning || {};
                
                currentRecordId = recordId;
                
                // Save to session storage and restore form
                saveToSessionStorage();
                restoreFormFields();
                
                // Go to step 1
                goToStep(1);
                
                // Hide search results
                document.getElementById('searchResults').classList.add('hidden');
                
                alert(`Loaded record for ${data.clientFullName}`);
                
            } catch (error) {
                console.error('Error loading client record:', error);
                alert('Error loading record. Please try again.');
            }
        }

        async function deleteClientRecord(recordId) {
            if (!confirm('Are you sure you want to delete this record? This action cannot be undone.')) {
                return;
            }
            
            try {
                const FinancialSnapshot = Parse.Object.extend('financial_snapshot');
                const query = new Parse.Query(FinancialSnapshot);
                const record = await query.get(recordId);
                
                await record.destroy();
                
                alert('Record deleted successfully');
                
                // Refresh search results
                searchClients();
                
            } catch (error) {
                console.error('Error deleting client record:', error);
                alert('Error deleting record. Please try again.');
            }
        }

        function showNewClient() {
            // Clear current data
            formData = {
                personal: {},
                lifeInsurance: [],
                debts: {
                    realEstate: [],
                    auto: [],
                    student: [],
                    personal: [],
                    creditCard: []
                },
                income: [],
                retirement: [],
                financial: [],
                planning: {}
            };
            
            currentRecordId = null;
            
            // Clear session storage
            clearSessionStorage();
            
            // Reset form
            document.querySelectorAll('input, select, textarea').forEach(element => {
                if (element.type === 'radio' || element.type === 'checkbox') {
                    element.checked = false;
                } else {
                    element.value = '';
                }
            });
            
            // Clear dynamic entries
            document.querySelectorAll('.entry-item').forEach(item => item.remove());
            
            // Go to step 1
            goToStep(1);
            
            // Hide search results
            document.getElementById('searchResults').classList.add('hidden');
            
            alert('Started new client record');
        }

        function calculateAge() {
            const birthDate = new Date(document.getElementById('dateOfBirth').value);
            const today = new Date();
            let age = today.getFullYear() - birthDate.getFullYear();
            const monthDiff = today.getMonth() - birthDate.getMonth();
            
            if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
                age--;
            }
            
            document.getElementById('age').value = age;
            formData.personal.age = age;
            
            // Show/hide age-specific sections
            updateAgeSpecificSections(age);
        }

        function updateAgeSpecificSections(age) {
            const retirementSurvey = document.getElementById('retirementSurvey');
            const incomeSurveySkip = document.getElementById('incomeSurveySkip');
            
            if (age >= 59.5) {
                retirementSurvey.style.display = 'block';
            } else {
                retirementSurvey.style.display = 'none';
            }
            
            // Show skip option for younger, high-income individuals
            if (age < 50 && formData.income.length > 0) {
                const totalIncome = calculateTotalIncome();
                if (totalIncome > 100000) {
                    incomeSurveySkip.style.display = 'block';
                }
            }
        }

        async function nextStep() {
            if (validateCurrentStep()) {
                saveCurrentStepData();
                
                // Auto-save to database if agent is set and client name exists
                if (currentAgent && formData.personal.firstName && formData.personal.lastName) {
                    await saveToDatabase();
                }
                
                if (currentStep < totalSteps) {
                    currentStep++;
                    goToStep(currentStep);
                }
            }
        }

        function previousStep() {
            if (currentStep > 1) {
                currentStep--;
                goToStep(currentStep);
            }
        }

        function goToStep(stepNumber) {
            // Hide all steps
            document.querySelectorAll('.step').forEach(step => {
                step.classList.add('hidden');
            });
            
            // Show target step
            document.getElementById(`step${stepNumber}`).classList.remove('hidden');
            
            // Update progress
            currentStep = stepNumber;
            updateProgress();
            updateNavigationButtons();
            
            // Save current step to session storage
            saveToSessionStorage();
            
            // Load step-specific data
            loadStepData(stepNumber);
        }

        function isStepCompleted(stepNumber) {
            switch(stepNumber) {
                case 1:
                    return formData.personal.firstName && formData.personal.lastName;
                case 2:
                    return formData.lifeInsurance.length > 0;
                case 3:
                    return Object.values(formData.debts).some(category => category.length > 0);
                case 4:
                    return formData.income.length > 0;
                case 5:
                    return formData.retirement.length > 0;
                case 6:
                    return Object.keys(formData.planning).length > 0;
                case 7:
                    return true; // Summary step is always available
                default:
                    return false;
            }
        }

        function updateProgress() {
            const completedSteps = [1,2,3,4,5,6,7].filter(step => isStepCompleted(step)).length;
            const progressPercent = (completedSteps / totalSteps) * 100;
            
            // Update simple progress bar
            const simpleFill = document.getElementById('simpleProgressFill');
            const progressText = document.getElementById('progressText');
            const sidebarPercentage = document.getElementById('sidebarProgressPercentage');
            
            if (simpleFill) {
                simpleFill.style.width = progressPercent + '%';
            }
            
            // Update progress text
            if (progressText) {
                progressText.textContent = `Step ${currentStep} of ${totalSteps} (${Math.round(progressPercent)}% complete)`;
            }
            
            if (sidebarPercentage) {
                sidebarPercentage.textContent = `Step ${currentStep} of ${totalSteps}`;
            }
            
            // Update vertical step indicators in sidebar
            document.querySelectorAll('.vertical-progress-step').forEach((step, index) => {
                const stepNumber = index + 1;
                step.classList.remove('active', 'completed');
                
                if (stepNumber === currentStep) {
                    step.classList.add('active');
                } else if (isStepCompleted(stepNumber)) {
                    step.classList.add('completed');
                }
            });
        }

        function updateNavigationButtons() {
            const prevBtn = document.getElementById('prevBtn');
            const nextBtn = document.getElementById('nextBtn');
            
            prevBtn.style.display = currentStep > 1 ? 'block' : 'none';
            nextBtn.textContent = currentStep === totalSteps ? 'Complete Assessment' : 'Next →';
        }

        function validateCurrentStep() {
            switch(currentStep) {
                case 1:
                    return validateGeneralInfo();
                case 2:
                    return validateLifeInsurance();
                case 3:
                    return validateDebtInfo();
                case 4:
                    return validateIncomeInfo();
                case 5:
                    return validateRetirementInfo();
                case 6:
                    return validatePlanningInfo();
                case 7:
                    return true;
                default:
                    return true;
            }
        }

        function validateGeneralInfo() {
            const required = ['firstName', 'lastName', 'dateOfBirth', 'maritalStatus', 'homeOwnership'];
            const mainGoal = document.querySelector('input[name="mainGoal"]:checked');
            
            for (let field of required) {
                const element = document.getElementById(field);
                if (!element.value.trim()) {
                    alert(`Please fill in ${field.replace(/([A-Z])/g, ' $1').toLowerCase()}`);
                    element.focus();
                    return false;
                }
            }
            
            if (!mainGoal) {
                alert('Please select your main financial goal');
                return false;
            }
            
            return true;
        }

        function validateLifeInsurance() {
            // Life insurance is optional, so always return true
            return true;
        }

        function validateDebtInfo() {
            // Debt is optional, so always return true
            return true;
        }

        function validateIncomeInfo() {
            // Income is optional, so always return true
            return true;
        }

        function validateRetirementInfo() {
            // Retirement info is optional, so always return true
            return true;
        }

        function validatePlanningInfo() {
            // Planning info is optional, so always return true
            return true;
        }

        function saveCurrentStepData() {
            switch(currentStep) {
                case 1:
                    saveGeneralInfo();
                    break;
                case 2:
                    saveLifeInsurance();
                    break;
                case 3:
                    saveDebtInfo();
                    break;
                case 4:
                    saveIncomeInfo();
                    break;
                case 5:
                    saveRetirementInfo();
                    break;
                case 6:
                    savePlanningInfo();
                    break;
            }
            
            // Save to session storage after updating formData
            saveToSessionStorage();
        }

        function saveGeneralInfo() {
            formData.personal = {
                firstName: document.getElementById('firstName').value,
                lastName: document.getElementById('lastName').value,
                dateOfBirth: document.getElementById('dateOfBirth').value,
                age: parseInt(document.getElementById('age').value),
                maritalStatus: document.getElementById('maritalStatus').value,
                homeOwnership: document.getElementById('homeOwnership').value,
                children: parseInt(document.getElementById('children').value),
                grandchildren: parseInt(document.getElementById('grandchildren').value),
                mainGoal: document.querySelector('input[name="mainGoal"]:checked')?.value
            };
        }

        function saveLifeInsurance() {
            // Save life insurance data
            formData.lifeInsurance = collectLifeInsuranceData();
            checkLivingBenefitsQuestion();
        }

        function saveDebtInfo() {
            // Save debt data
            formData.debts = collectDebtData();
            updateDebtSummary();
        }

        function saveIncomeInfo() {
            // Save income data
            formData.income = collectIncomeData();
            updateIncomeSummary();
        }

        function saveRetirementInfo() {
            // Save retirement data
            formData.retirement = collectRetirementData();
            formData.financial = collectFinancialData();
        }

        function savePlanningInfo() {
            // Save planning data
            formData.planning = {
                hasWill: document.querySelector('input[name="hasWill"]:checked')?.value,
                hasTrust: document.querySelector('input[name="hasTrust"]:checked')?.value,
                taxConcern: document.getElementById('taxConcern').value,
                familyHarmonyConcern: document.getElementById('familyHarmonyConcern').value
            };
        }

        function loadStepData(stepNumber) {
            switch(stepNumber) {
                case 7:
                    generateSummary();
                    break;
            }
        }

        // Life Insurance Functions
        function addLifeInsuranceEntry() {
            const container = document.getElementById('lifeInsuranceEntries');
            const entryId = 'lifeInsurance_' + Date.now();
            
            const entryHTML = `
                <div class="entry-item" id="${entryId}">
                    <button type="button" class="remove-entry-btn" onclick="removeEntry('${entryId}')">Remove</button>
                    <div class="entry-header">
                        <div class="entry-title">Life Insurance Policy</div>
                    </div>
                    <div class="form-row">
                        <div class="form-col">
                            <label>Policy Type</label>
                            <select name="policyType" onchange="toggleCashValue('${entryId}')">
                                <option value="">Select...</option>
                                <option value="term">Term Life</option>
                                <option value="whole">Whole Life</option>
                                <option value="universal">Universal Life</option>
                                <option value="permanent">Permanent</option>
                            </select>
                        </div>
                        <div class="form-col">
                            <label>Insurance Company</label>
                            <input type="text" name="insurer" placeholder="Company name">
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-col">
                            <label>Face Amount (Death Benefit)</label>
                            <input type="text" name="faceAmount" placeholder="$0">
                        </div>
                        <div class="form-col">
                            <label>Annual Premium</label>
                            <input type="text" name="premium" placeholder="$0">
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-col" id="cashValueField_${entryId}">
                            <label>Cash Value</label>
                            <input type="text" name="cashValue" placeholder="$0">
                        </div>
                        <div class="form-col">
                            <label>Living Benefits Available?</label>
                            <select name="livingBenefits">
                                <option value="">Select...</option>
                                <option value="yes">Yes</option>
                                <option value="no">No</option>
                                <option value="unknown">Don't Know</option>
                            </select>
                        </div>
                    </div>
                </div>
            `;
            
            container.insertAdjacentHTML('beforeend', entryHTML);
        }

        function toggleCashValue(entryId) {
            const entry = document.getElementById(entryId);
            const policyType = entry.querySelector('select[name="policyType"]').value;
            const cashValueField = entry.querySelector('#cashValueField_' + entryId);
            const cashValueInput = entry.querySelector('input[name="cashValue"]');
            
            if (policyType === 'term') {
                cashValueInput.value = '';
                cashValueInput.disabled = true;
                cashValueField.style.opacity = '0.5';
            } else {
                cashValueInput.disabled = false;
                cashValueField.style.opacity = '1';
            }
        }

        function collectLifeInsuranceData() {
            const entries = document.querySelectorAll('#lifeInsuranceEntries .entry-item');
            const data = [];
            
            entries.forEach(entry => {
                const policyData = {
                    policyType: entry.querySelector('select[name="policyType"]').value,
                    insurer: entry.querySelector('input[name="insurer"]').value,
                    faceAmount: parseCurrencyValue(entry.querySelector('input[name="faceAmount"]').value || '0'),
                    premium: parseCurrencyValue(entry.querySelector('input[name="premium"]').value || '0'),
                    cashValue: parseCurrencyValue(entry.querySelector('input[name="cashValue"]').value || '0'),
                    livingBenefits: entry.querySelector('select[name="livingBenefits"]').value
                };
                
                if (policyData.insurer || policyData.faceAmount > 0) {
                    data.push(policyData);
                }
            });
            
            return data;
        }

        function checkLivingBenefitsQuestion() {
            const policies = formData.lifeInsurance;
            const hasLivingBenefits = policies.some(policy => policy.livingBenefits === 'yes');
            const questionSection = document.getElementById('noLivingBenefitsQuestion');
            
            if (policies.length > 0 && !hasLivingBenefits) {
                questionSection.style.display = 'block';
            } else {
                questionSection.style.display = 'none';
            }
        }

        // Debt Functions
        function addDebtEntry(debtType) {
            const container = document.getElementById(`${debtType}Entries`);
            const entryId = `${debtType}_` + Date.now();
            
            let entryHTML = '';
            
            switch(debtType) {
                case 'realEstate':
                    entryHTML = createRealEstateEntry(entryId);
                    break;
                case 'auto':
                    entryHTML = createAutoEntry(entryId);
                    break;
                case 'student':
                    entryHTML = createStudentEntry(entryId);
                    break;
                case 'personal':
                    entryHTML = createPersonalEntry(entryId);
                    break;
                case 'creditCard':
                    entryHTML = createCreditCardEntry(entryId);
                    break;
            }
            
            container.insertAdjacentHTML('beforeend', entryHTML);
        }

        function createRealEstateEntry(entryId) {
            return `
                <div class="entry-item" id="${entryId}">
                    <button type="button" class="remove-entry-btn" onclick="removeEntry('${entryId}')">Remove</button>
                    <div class="entry-header">
                        <div class="entry-title">Real Estate Property</div>
                    </div>
                    <div class="form-row">
                        <div class="form-col">
                            <label>Property Type</label>
                            <select name="propertyType">
                                <option value="">Select...</option>
                                <option value="primary">Primary Residence</option>
                                <option value="secondary">Secondary Home</option>
                                <option value="investment">Investment Property</option>
                                <option value="commercial">Commercial</option>
                            </select>
                        </div>
                        <div class="form-col">
                            <label>Current Property Value</label>
                            <input type="number" name="currentValue" placeholder="0" min="0">
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-col">
                            <label>Original Loan Amount</label>
                            <input type="number" name="originalLoan" placeholder="0" min="0">
                        </div>
                        <div class="form-col">
                            <label>Current Balance</label>
                            <input type="number" name="currentBalance" placeholder="0" min="0">
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-col">
                            <label>Monthly Payment</label>
                            <input type="number" name="monthlyPayment" placeholder="0" min="0">
                        </div>
                        <div class="form-col">
                            <label>Interest Rate (%)</label>
                            <input type="number" name="interestRate" placeholder="0" min="0" max="100" step="0.01">
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-col">
                            <label>Loan Term (years)</label>
                            <input type="number" name="term" placeholder="30" min="1" max="50">
                        </div>
                        <div class="form-col">
                            <label>Additional Monthly Payment</label>
                            <input type="number" name="overpayment" placeholder="0" min="0">
                        </div>
                    </div>
                </div>
            `;
        }

        function createAutoEntry(entryId) {
            return `
                <div class="entry-item" id="${entryId}">
                    <button type="button" class="remove-entry-btn" onclick="removeEntry('${entryId}')">Remove</button>
                    <div class="entry-header">
                        <div class="entry-title">Vehicle</div>
                    </div>
                    <div class="form-row">
                        <div class="form-col">
                            <label>Vehicle Information</label>
                            <input type="text" name="vehicleInfo" placeholder="Year Make Model">
                        </div>
                        <div class="form-col">
                            <label>Current Value</label>
                            <input type="number" name="currentValue" placeholder="0" min="0">
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-col">
                            <label>Loan Balance</label>
                            <input type="number" name="loanBalance" placeholder="0" min="0">
                        </div>
                        <div class="form-col">
                            <label>Monthly Payment</label>
                            <input type="number" name="monthlyPayment" placeholder="0" min="0">
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-col">
                            <label>Interest Rate (%)</label>
                            <input type="number" name="interestRate" placeholder="0" min="0" max="100" step="0.01">
                        </div>
                        <div class="form-col">
                            <label>Additional Monthly Payment</label>
                            <input type="number" name="overpayment" placeholder="0" min="0">
                        </div>
                    </div>
                </div>
            `;
        }

        function createStudentEntry(entryId) {
            return `
                <div class="entry-item" id="${entryId}">
                    <button type="button" class="remove-entry-btn" onclick="removeEntry('${entryId}')">Remove</button>
                    <div class="entry-header">
                        <div class="entry-title">Student Loan</div>
                    </div>
                    <div class="form-row">
                        <div class="form-col">
                            <label>Lender</label>
                            <input type="text" name="lender" placeholder="Lender name">
                        </div>
                        <div class="form-col">
                            <label>Current Balance</label>
                            <input type="number" name="balance" placeholder="0" min="0">
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-col">
                            <label>Monthly Payment</label>
                            <input type="number" name="monthlyPayment" placeholder="0" min="0">
                        </div>
                        <div class="form-col">
                            <label>Interest Rate (%)</label>
                            <input type="number" name="interestRate" placeholder="0" min="0" max="100" step="0.01">
                        </div>
                    </div>
                    <div class="form-group">
                        <label>Additional Monthly Payment</label>
                        <input type="number" name="overpayment" placeholder="0" min="0">
                    </div>
                </div>
            `;
        }

        function createPersonalEntry(entryId) {
            return `
                <div class="entry-item" id="${entryId}">
                    <button type="button" class="remove-entry-btn" onclick="removeEntry('${entryId}')">Remove</button>
                    <div class="entry-header">
                        <div class="entry-title">Personal Loan</div>
                    </div>
                    <div class="form-row">
                        <div class="form-col">
                            <label>Creditor</label>
                            <input type="text" name="creditor" placeholder="Creditor name">
                        </div>
                        <div class="form-col">
                            <label>Current Balance</label>
                            <input type="number" name="balance" placeholder="0" min="0">
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-col">
                            <label>Monthly Payment</label>
                            <input type="number" name="monthlyPayment" placeholder="0" min="0">
                        </div>
                        <div class="form-col">
                            <label>Interest Rate (%)</label>
                            <input type="number" name="interestRate" placeholder="0" min="0" max="100" step="0.01">
                        </div>
                    </div>
                    <div class="form-group">
                        <label>Additional Monthly Payment</label>
                        <input type="number" name="overpayment" placeholder="0" min="0">
                    </div>
                </div>
            `;
        }

        function createCreditCardEntry(entryId) {
            return `
                <div class="entry-item" id="${entryId}">
                    <button type="button" class="remove-entry-btn" onclick="removeEntry('${entryId}')">Remove</button>
                    <div class="entry-header">
                        <div class="entry-title">Credit Card</div>
                    </div>
                    <div class="form-row">
                        <div class="form-col">
                            <label>Card Issuer</label>
                            <input type="text" name="issuer" placeholder="Card issuer">
                        </div>
                        <div class="form-col">
                            <label>Current Balance</label>
                            <input type="number" name="balance" placeholder="0" min="0">
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-col">
                            <label>Monthly Payment</label>
                            <input type="number" name="monthlyPayment" placeholder="0" min="0">
                        </div>
                        <div class="form-col">
                            <label>Interest Rate (%)</label>
                            <input type="number" name="interestRate" placeholder="0" min="0" max="100" step="0.01">
                        </div>
                    </div>
                    <div class="form-group">
                        <label>Credit Limit</label>
                        <input type="number" name="creditLimit" placeholder="0" min="0">
                    </div>
                </div>
            `;
        }

        function collectDebtData() {
            const debtTypes = ['realEstate', 'auto', 'student', 'personal', 'creditCard'];
            const debtData = {};
            
            debtTypes.forEach(type => {
                const entries = document.querySelectorAll(`#${type}Entries .entry-item`);
                debtData[type] = [];
                
                entries.forEach(entry => {
                    const inputs = entry.querySelectorAll('input, select');
                    const data = {};
                    
                    inputs.forEach(input => {
                        if (input.name) {
                            data[input.name] = input.type === 'number' ? 
                                (parseFloat(input.value) || 0) : input.value;
                        }
                    });
                    
                    // Only add if there's meaningful data
                    if (Object.values(data).some(value => value && value !== 0)) {
                        debtData[type].push(data);
                    }
                });
            });
            
            return debtData;
        }

        function updateDebtSummary() {
            const debts = formData.debts;
            let totalMonthlyPayments = 0;
            let totalBalance = 0;
            let weightedInterestSum = 0;
            let totalDebtCount = 0;
            
            Object.values(debts).forEach(debtArray => {
                debtArray.forEach(debt => {
                    totalMonthlyPayments += debt.monthlyPayment || 0;
                    const balance = debt.balance || debt.currentBalance || debt.loanBalance || 0;
                    totalBalance += balance;
                    weightedInterestSum += (debt.interestRate || 0) * balance;
                    totalDebtCount++;
                });
            });
            
            const averageInterestRate = totalBalance > 0 ? weightedInterestSum / totalBalance : 0;
            
            document.getElementById('totalMonthlyPayments').textContent = 
                '$' + totalMonthlyPayments.toLocaleString();
            document.getElementById('totalDebtBalance').textContent = 
                '$' + totalBalance.toLocaleString();
            document.getElementById('averageInterestRate').textContent = 
                averageInterestRate.toFixed(2) + '%';
            
            // Update chart if there's debt data
            if (totalDebtCount > 0) {
                updateDebtChart();
            }
        }

        function updateDebtChart() {
            const ctx = document.getElementById('debtChart').getContext('2d');
            const debts = formData.debts;
            
            const labels = [];
            const data = [];
            const colors = ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF'];
            
            Object.entries(debts).forEach(([type, debtArray], index) => {
                const total = debtArray.reduce((sum, debt) => {
                    return sum + (debt.balance || debt.currentBalance || debt.loanBalance || 0);
                }, 0);
                
                if (total > 0) {
                    labels.push(type.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase()));
                    data.push(total);
                }
            });
            
            new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: labels,
                    datasets: [{
                        data: data,
                        backgroundColor: colors.slice(0, labels.length)
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        },
                        title: {
                            display: true,
                            text: 'Debt Distribution by Category'
                        }
                    }
                }
            });
        }

        // Income Functions
        function addIncomeEntry() {
            const container = document.getElementById('incomeEntries');
            const entryId = 'income_' + Date.now();
            
            const entryHTML = `
                <div class="entry-item" id="${entryId}">
                    <button type="button" class="remove-entry-btn" onclick="removeEntry('${entryId}')">Remove</button>
                    <div class="entry-header">
                        <div class="entry-title">Income Source</div>
                    </div>
                    <div class="form-row">
                        <div class="form-col">
                            <label>Person</label>
                            <select name="person">
                                <option value="">Select...</option>
                                <option value="self">Self</option>
                                <option value="spouse">Spouse</option>
                            </select>
                        </div>
                        <div class="form-col">
                            <label>Source Type</label>
                            <select name="sourceType">
                                <option value="">Select...</option>
                                <option value="employment">Employment</option>
                                <option value="business">Business/Self-Employment</option>
                                <option value="investments">Investments</option>
                                <option value="retirement">Retirement Benefits</option>
                                <option value="other">Other</option>
                            </select>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-col">
                            <label>Employer/Source</label>
                            <input type="text" name="employer" placeholder="Employer or source name">
                        </div>
                        <div class="form-col">
                            <label>Frequency</label>
                            <select name="frequency">
                                <option value="">Select...</option>
                                <option value="monthly">Monthly</option>
                                <option value="annual">Annual</option>
                                <option value="hourly">Hourly</option>
                            </select>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-col">
                            <label>Gross Income</label>
                            <input type="number" name="grossIncome" placeholder="0" min="0">
                        </div>
                        <div class="form-col">
                            <label>Net Income</label>
                            <input type="number" name="netIncome" placeholder="0" min="0">
                        </div>
                    </div>
                </div>
            `;
            
            container.insertAdjacentHTML('beforeend', entryHTML);
        }

        function collectIncomeData() {
            const entries = document.querySelectorAll('#incomeEntries .entry-item');
            const data = [];
            
            entries.forEach(entry => {
                const incomeData = {
                    person: entry.querySelector('select[name="person"]').value,
                    sourceType: entry.querySelector('select[name="sourceType"]').value,
                    employer: entry.querySelector('input[name="employer"]').value,
                    frequency: entry.querySelector('select[name="frequency"]').value,
                    grossIncome: parseFloat(entry.querySelector('input[name="grossIncome"]').value) || 0,
                    netIncome: parseFloat(entry.querySelector('input[name="netIncome"]').value) || 0
                };
                
                if (incomeData.employer || incomeData.grossIncome > 0) {
                    data.push(incomeData);
                }
            });
            
            return data;
        }

        function updateIncomeSummary() {
            const income = formData.income;
            let totalGross = 0;
            let totalNet = 0;
            
            income.forEach(source => {
                // Normalize to annual figures
                let gross = source.grossIncome;
                let net = source.netIncome;
                
                if (source.frequency === 'monthly') {
                    gross *= 12;
                    net *= 12;
                } else if (source.frequency === 'hourly') {
                    // Assume 40 hours/week, 52 weeks/year
                    gross *= 40 * 52;
                    net *= 40 * 52;
                }
                
                totalGross += gross;
                totalNet += net;
            });
            
            document.getElementById('totalGrossIncome').textContent = 
                '$' + totalGross.toLocaleString();
            document.getElementById('totalNetIncome').textContent = 
                '$' + totalNet.toLocaleString();
            document.getElementById('householdIncome').textContent = 
                '$' + totalGross.toLocaleString();
            
            // Check for income survey skip conditions
            updateAgeSpecificSections(formData.personal.age);
        }

        function calculateTotalIncome() {
            return formData.income.reduce((total, source) => {
                let income = source.grossIncome;
                if (source.frequency === 'monthly') {
                    income *= 12;
                } else if (source.frequency === 'hourly') {
                    income *= 40 * 52;
                }
                return total + income;
            }, 0);
        }

        // Retirement Functions
        function addRetirementEntry() {
            const container = document.getElementById('retirementEntries');
            const entryId = 'retirement_' + Date.now();
            
            const entryHTML = `
                <div class="entry-item" id="${entryId}">
                    <button type="button" class="remove-entry-btn" onclick="removeEntry('${entryId}')">Remove</button>
                    <div class="entry-header">
                        <div class="entry-title">Retirement Account</div>
                    </div>
                    <div class="form-row">
                        <div class="form-col">
                            <label>Account Type</label>
                            <select name="accountType" onchange="toggleEmployerFields('${entryId}')">
                                <option value="">Select...</option>
                                <option value="401k">401(k)</option>
                                <option value="403b">403(b)</option>
                                <option value="ira">Traditional IRA</option>
                                <option value="roth">Roth IRA</option>
                                <option value="sep">SEP-IRA</option>
                                <option value="simple">SIMPLE IRA</option>
                                <option value="pension">Pension</option>
                                <option value="other">Other</option>
                            </select>
                        </div>
                        <div class="form-col">
                            <label>Institution</label>
                            <input type="text" name="institution" placeholder="Financial institution">
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-col">
                            <label>Current Balance</label>
                            <input type="number" name="currentBalance" placeholder="0" min="0">
                        </div>
                        <div class="form-col">
                            <label>Monthly Contribution</label>
                            <input type="number" name="contribution" placeholder="0" min="0">
                        </div>
                    </div>
                    <div class="form-row employer-fields" id="employerFields_${entryId}">
                        <div class="form-col">
                            <label>Employer Match</label>
                            <input type="number" name="employerMatch" placeholder="0" min="0">
                        </div>
                        <div class="form-col">
                            <label>Vesting Schedule</label>
                            <select name="vestingSchedule">
                                <option value="">Select...</option>
                                <option value="immediate">Immediate</option>
                                <option value="graduated">Graduated</option>
                                <option value="cliff">Cliff Vesting</option>
                                <option value="none">No Vesting</option>
                            </select>
                        </div>
                    </div>
                </div>
            `;
            
            container.insertAdjacentHTML('beforeend', entryHTML);
        }

        function toggleEmployerFields(entryId) {
            const entry = document.getElementById(entryId);
            const accountType = entry.querySelector('select[name="accountType"]').value;
            const employerFields = entry.querySelector('#employerFields_' + entryId);
            
            const employerBasedAccounts = ['401k', '403b', 'sep', 'simple', 'pension'];
            
            if (employerBasedAccounts.includes(accountType)) {
                employerFields.style.display = 'flex';
            } else {
                employerFields.style.display = 'none';
                // Clear the fields
                entry.querySelector('input[name="employerMatch"]').value = '';
                entry.querySelector('select[name="vestingSchedule"]').value = '';
            }
        }

        function addFinancialEntry() {
            const container = document.getElementById('financialEntries');
            const entryId = 'financial_' + Date.now();
            
            const entryHTML = `
                <div class="entry-item" id="${entryId}">
                    <button type="button" class="remove-entry-btn" onclick="removeEntry('${entryId}')">Remove</button>
                    <div class="entry-header">
                        <div class="entry-title">Financial Account</div>
                    </div>
                    <div class="form-row">
                        <div class="form-col">
                            <label>Account Type</label>
                            <select name="accountType">
                                <option value="">Select...</option>
                                <option value="checking">Checking</option>
                                <option value="savings">Savings</option>
                                <option value="brokerage">Brokerage</option>
                                <option value="cd">Certificate of Deposit</option>
                                <option value="money_market">Money Market</option>
                                <option value="other">Other</option>
                            </select>
                        </div>
                        <div class="form-col">
                            <label>Institution</label>
                            <input type="text" name="institution" placeholder="Financial institution">
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-col">
                            <label>Current Balance</label>
                            <input type="number" name="balance" placeholder="0" min="0">
                        </div>
                        <div class="form-col">
                            <label>Interest Rate (%)</label>
                            <input type="number" name="interestRate" placeholder="0" min="0" max="100" step="0.01">
                        </div>
                    </div>
                </div>
            `;
            
            container.insertAdjacentHTML('beforeend', entryHTML);
        }

        function collectRetirementData() {
            const entries = document.querySelectorAll('#retirementEntries .entry-item');
            const data = [];
            
            entries.forEach(entry => {
                const retirementData = {
                    accountType: entry.querySelector('select[name="accountType"]').value,
                    institution: entry.querySelector('input[name="institution"]').value,
                    currentBalance: parseFloat(entry.querySelector('input[name="currentBalance"]').value) || 0,
                    contribution: parseFloat(entry.querySelector('input[name="contribution"]').value) || 0,
                    employerMatch: parseFloat(entry.querySelector('input[name="employerMatch"]')?.value) || 0,
                    vestingSchedule: entry.querySelector('select[name="vestingSchedule"]')?.value || ''
                };
                
                if (retirementData.institution || retirementData.currentBalance > 0) {
                    data.push(retirementData);
                }
            });
            
            return data;
        }

        function collectFinancialData() {
            const entries = document.querySelectorAll('#financialEntries .entry-item');
            const data = [];
            
            entries.forEach(entry => {
                const financialData = {
                    accountType: entry.querySelector('select[name="accountType"]').value,
                    institution: entry.querySelector('input[name="institution"]').value,
                    balance: parseFloat(entry.querySelector('input[name="balance"]').value) || 0,
                    interestRate: parseFloat(entry.querySelector('input[name="interestRate"]').value) || 0
                };
                
                if (financialData.institution || financialData.balance > 0) {
                    data.push(financialData);
                }
            });
            
            return data;
        }

        // General Functions
        function removeEntry(entryId) {
            const entry = document.getElementById(entryId);
            if (entry) {
                entry.remove();
                
                // Update summaries if we're on debt or income steps
                if (currentStep === 3) {
                    saveDebtInfo();
                } else if (currentStep === 4) {
                    saveIncomeInfo();
                }
            }
        }

        // Summary Functions
        function generateSummary() {
            generatePersonalSummary();
            generateFinancialOverview();
            generateRecommendations();
            generateSummaryChart();
        }

        function generatePersonalSummary() {
            const personal = formData.personal;
            const summaryHTML = `
                <div class="summary-grid">
                    <div class="summary-item">
                        <div class="summary-value">${personal.firstName} ${personal.lastName}</div>
                        <div class="summary-label">Name</div>
                    </div>
                    <div class="summary-item">
                        <div class="summary-value">${personal.age}</div>
                        <div class="summary-label">Age</div>
                    </div>
                    <div class="summary-item">
                        <div class="summary-value">${personal.maritalStatus}</div>
                        <div class="summary-label">Marital Status</div>
                    </div>
                    <div class="summary-item">
                        <div class="summary-value">${personal.mainGoal}</div>
                        <div class="summary-label">Primary Goal</div>
                    </div>
                </div>
            `;
            
            document.getElementById('personalSummary').innerHTML = summaryHTML;
        }

        function generateFinancialOverview() {
            // Calculate totals
            const totalIncome = calculateTotalIncome();
            const totalDebt = calculateTotalDebt();
            const totalAssets = calculateTotalAssets();
            const totalLifeInsurance = calculateTotalLifeInsurance();
            const netWorth = totalAssets - totalDebt;
            
            document.getElementById('finalTotalIncome').textContent = '$' + totalIncome.toLocaleString();
            document.getElementById('finalTotalDebt').textContent = '$' + totalDebt.toLocaleString();
            document.getElementById('finalNetWorth').textContent = '$' + netWorth.toLocaleString();
            document.getElementById('finalLifeInsurance').textContent = '$' + totalLifeInsurance.toLocaleString();
            
            // Calculate and display health score
            const healthScore = calculateFinancialHealthScore(totalIncome, totalDebt, totalAssets, totalLifeInsurance);
            document.getElementById('healthScore').textContent = healthScore;
        }

        function calculateTotalDebt() {
            const debts = formData.debts;
            let total = 0;
            
            Object.values(debts).forEach(debtArray => {
                debtArray.forEach(debt => {
                    total += debt.balance || debt.currentBalance || debt.loanBalance || 0;
                });
            });
            
            return total;
        }

        function calculateTotalAssets() {
            let total = 0;
            
            // Add retirement accounts
            formData.retirement.forEach(account => {
                total += account.currentBalance || 0;
            });
            
            // Add financial accounts
            formData.financial.forEach(account => {
                total += account.balance || 0;
            });
            
            // Add life insurance cash value
            formData.lifeInsurance.forEach(policy => {
                total += policy.cashValue || 0;
            });
            
            // Add real estate equity (simplified calculation)
            formData.debts.realEstate.forEach(property => {
                const equity = (property.currentValue || 0) - (property.currentBalance || 0);
                total += Math.max(0, equity);
            });
            
            return total;
        }

        function calculateTotalLifeInsurance() {
            return formData.lifeInsurance.reduce((total, policy) => {
                return total + (policy.faceAmount || 0);
            }, 0);
        }

        function calculateFinancialHealthScore(income, debt, assets, lifeInsurance) {
            let score = 50; // Base score
            
            // Income factors
            if (income > 100000) score += 15;
            else if (income > 50000) score += 10;
            else if (income > 25000) score += 5;
            
            // Debt-to-income ratio
            const debtToIncome = income > 0 ? debt / income : 0;
            if (debtToIncome < 0.2) score += 15;
            else if (debtToIncome < 0.36) score += 10;
            else if (debtToIncome < 0.5) score += 5;
            else score -= 10;
            
            // Net worth
            const netWorth = assets - debt;
            if (netWorth > 100000) score += 15;
            else if (netWorth > 50000) score += 10;
            else if (netWorth > 0) score += 5;
            else score -= 10;
            
            // Life insurance coverage
            const coverageRatio = income > 0 ? lifeInsurance / income : 0;
            if (coverageRatio >= 10) score += 10;
            else if (coverageRatio >= 5) score += 5;
            else if (lifeInsurance > 0) score += 2;
            
            return Math.max(0, Math.min(100, Math.round(score)));
        }

        function generateRecommendations() {
            const recommendations = [];
            const totalIncome = calculateTotalIncome();
            const totalDebt = calculateTotalDebt();
            const totalLifeInsurance = calculateTotalLifeInsurance();
            
            // Life insurance recommendations
            const recommendedCoverage = totalIncome * 10;
            if (totalLifeInsurance < recommendedCoverage) {
                recommendations.push({
                    type: 'Life Insurance',
                    message: `Consider increasing life insurance coverage. Recommended: $${recommendedCoverage.toLocaleString()}, Current: $${totalLifeInsurance.toLocaleString()}`
                });
            }
            
            // Debt recommendations
            const debtToIncome = totalIncome > 0 ? totalDebt / totalIncome : 0;
            if (debtToIncome > 0.36) {
                recommendations.push({
                    type: 'Debt Management',
                    message: 'Your debt-to-income ratio is high. Consider debt consolidation or aggressive paydown strategies.'
                });
            }
            
            // Emergency fund recommendations
            const liquidAssets = formData.financial.reduce((total, account) => {
                if (['checking', 'savings', 'money_market'].includes(account.accountType)) {
                    return total + account.balance;
                }
                return total;
            }, 0);
            
            const monthlyExpenses = totalDebt / 12; // Simplified calculation
            if (liquidAssets < monthlyExpenses * 3) {
                recommendations.push({
                    type: 'Emergency Fund',
                    message: 'Build an emergency fund covering 3-6 months of expenses.'
                });
            }
            
            // Age-specific recommendations
            if (formData.personal.age < 35) {
                recommendations.push({
                    type: 'Long-term Planning',
                    message: 'Focus on aggressive retirement savings and term life insurance while young.'
                });
            } else if (formData.personal.age > 50) {
                recommendations.push({
                    type: 'Pre-retirement',
                    message: 'Review retirement projections and consider catch-up contributions.'
                });
            }
            
            // Estate planning recommendations
            if (formData.planning.hasWill === 'no' || formData.planning.hasWill === 'outdated') {
                recommendations.push({
                    type: 'Estate Planning',
                    message: 'Update or create estate planning documents including will and beneficiaries.'
                });
            }
            
            // Display recommendations
            const recommendationsHTML = recommendations.map(rec => `
                <div class="alert alert-info">
                    <strong>${rec.type}:</strong> ${rec.message}
                </div>
            `).join('');
            
            document.getElementById('recommendationsList').innerHTML = recommendationsHTML;
        }

        function generateSummaryChart() {
            const ctx = document.getElementById('summaryChart').getContext('2d');
            
            const totalIncome = calculateTotalIncome();
            const totalDebt = calculateTotalDebt();
            const totalAssets = calculateTotalAssets();
            
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: ['Annual Income', 'Total Debt', 'Total Assets', 'Net Worth'],
                    datasets: [{
                        label: 'Financial Overview',
                        data: [totalIncome, totalDebt, totalAssets, totalAssets - totalDebt],
                        backgroundColor: [
                            '#28a745',
                            '#dc3545',
                            '#007bff',
                            totalAssets - totalDebt > 0 ? '#28a745' : '#dc3545'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        },
                        title: {
                            display: true,
                            text: 'Financial Overview'
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return '$' + value.toLocaleString();
                                }
                            }
                        }
                    }
                }
            });
        }

        // Export Functions
        async function exportToPDF() {
            // Save to database before generating PDF
            if (currentAgent && formData.personal.firstName && formData.personal.lastName) {
                const saved = await saveToDatabase();
                if (!saved) {
                    return; // Don't generate PDF if save failed
                }
            }
            
            // Simplified PDF export - in a real implementation, you'd use a library like jsPDF
            const printWindow = window.open('', '_blank');
            const content = generatePDFContent();
            
            printWindow.document.write(`
                <html>
                    <head>
                        <title>Financial Snapshot Report</title>
                        <style>
                            body { font-family: Arial, sans-serif; margin: 20px; }
                            .pdf-header { text-align: center; margin-bottom: 30px; }
                            .section { margin-bottom: 25px; }
                            .section-title { font-size: 18px; font-weight: bold; margin-bottom: 10px; color: #235287; }
                            .summary-grid { display: grid; grid-template-columns: repeat(2, 1fr); gap: 15px; }
                            .summary-item { border: 1px solid #ddd; padding: 15px; text-align: center; }
                            .summary-value { font-size: 24px; font-weight: bold; color: #235287; }
                            .summary-label { color: #666; margin-top: 5px; }
                            .recommendation { background: #f8f9fa; padding: 10px; margin-bottom: 10px; border-left: 4px solid #007bff; }
                        </style>
                    </head>
                    <body>
                        ${content}
                    </body>
                </html>
            `);
            
            printWindow.document.close();
            printWindow.print();
        }

        function generatePDFContent() {
            const personal = formData.personal;
            const totalIncome = calculateTotalIncome();
            const totalDebt = calculateTotalDebt();
            const totalAssets = calculateTotalAssets();
            const totalLifeInsurance = calculateTotalLifeInsurance();
            const netWorth = totalAssets - totalDebt;
            const healthScore = calculateFinancialHealthScore(totalIncome, totalDebt, totalAssets, totalLifeInsurance);
            
            return `
                <div class="pdf-header">
                    <h1>Financial Snapshot Report</h1>
                    <h2>${personal.firstName} ${personal.lastName}</h2>
                    <p>Generated on ${new Date().toLocaleDateString()}</p>
                </div>
                
                <div class="section">
                    <div class="section-title">Personal Information</div>
                    <p><strong>Age:</strong> ${personal.age}</p>
                    <p><strong>Marital Status:</strong> ${personal.maritalStatus}</p>
                    <p><strong>Primary Goal:</strong> ${personal.mainGoal}</p>
                    <p><strong>Children:</strong> ${personal.children}</p>
                </div>
                
                <div class="section">
                    <div class="section-title">Financial Overview</div>
                    <div class="summary-grid">
                        <div class="summary-item">
                            <div class="summary-value">$${totalIncome.toLocaleString()}</div>
                            <div class="summary-label">Annual Income</div>
                        </div>
                        <div class="summary-item">
                            <div class="summary-value">$${totalDebt.toLocaleString()}</div>
                            <div class="summary-label">Total Debt</div>
                        </div>
                        <div class="summary-item">
                            <div class="summary-value">$${totalAssets.toLocaleString()}</div>
                            <div class="summary-label">Total Assets</div>
                        </div>
                        <div class="summary-item">
                            <div class="summary-value">$${netWorth.toLocaleString()}</div>
                            <div class="summary-label">Net Worth</div>
                        </div>
                    </div>
                </div>
                
                <div class="section">
                    <div class="section-title">Financial Health Score</div>
                    <div style="text-align: center; font-size: 48px; font-weight: bold; color: #28a745;">${healthScore}/100</div>
                </div>
                
                <div class="section">
                    <div class="section-title">Life Insurance Coverage</div>
                    <p><strong>Total Coverage:</strong> $${totalLifeInsurance.toLocaleString()}</p>
                    <p><strong>Policies:</strong> ${formData.lifeInsurance.length}</p>
                </div>
            `;
        }

        function emailReport() {
            const subject = `Financial Snapshot Report - ${formData.personal.firstName} ${formData.personal.lastName}`;
            const body = `Please find attached your financial snapshot report generated on ${new Date().toLocaleDateString()}.`;
            
            const mailtoLink = `mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
            window.location.href = mailtoLink;
        }
    </script>
</body>
</html>
